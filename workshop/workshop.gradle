buildscript {
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
    }
}
apply plugin: 'org.asciidoctor.convert'

def packagedBuildDir = "${rootDir}/docs"
def asciidoctorOutputDir = "$buildDir/asciidoc"

def excludePatterns = [
        '**/target/**',
        '**/.asciidoctor/**',
        '**/diag-*.png*',
        '**/build/**',
        '**/.idea',
        '**/*.iml',
]

asciidoctorj { version = '1.5.4.1' }
asciidoctor {
    attributes  \
         'project-name': rootProject.name

    sourceDir = rootDir
    sources {
        ['labs', projectDir.name].each { dir ->
            include "**/${dir}/**/*.adoc"
            excludePatterns.each { pattern ->
                exclude "${dir}/${pattern}"
            }
        }
    }
    resources {
        from(projectDir) {
            include '/src/docs/asciidoc/**'
            excludePatterns.each { pattern ->
                exclude "${pattern}"
            }
            exclude '**/*.adoc'
        }
        into projectDir.name
    }
    outputDir = file(asciidoctorOutputDir)

    backends 'html5'
    options doctype: 'book'
    attributes 'source-highlighter': 'coderay',
            toc: 'left',
            icons: 'font',
            idprefix: '',
            idseparator: '-',
            sectnums: '',
            reproducible: '',
            'stylesheet': "${projectDir}/src/docs/asciidoc/style.css"
}
asciidoctor.doLast {
    copy {
        // put index.html in the root of the docs
        from("$asciidoctorOutputDir/html5/${projectDir.name}") {
            include '**/index.html'
            includeEmptyDirs false
            eachFile { FileCopyDetails details ->
                details.path = details.name
            }
        }
        into file("$packagedBuildDir/")
    }
    copy {
        // put the images directory in the root of the docs
        from("$asciidoctorOutputDir/html5/${projectDir.name}/src/docs/asciidoc") {
            include 'images/**/*'
            include '**/*.pdf'
            includeEmptyDirs false
            eachFile { FileCopyDetails details ->
                details.path = details.relativeSourcePath
            }
        }
        into file("$packagedBuildDir/")
    }
}
//build.dependsOn asciidoctor

clean {
    delete(fileTree(rootDir) {
        ['labs', projectDir.name].each { dir ->
            excludePatterns.each { pattern ->
                include "${dir}/${pattern}"
            }
        }
    })
    delete(packagedBuildDir)
}
